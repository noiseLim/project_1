"use strict";

/*при использовании подобного синтаксиса функция
становится конструктором, с её помощью теперь можно
создавать новых пользователей*/

/*так же помимо свойств можем записать методы*/
function User (name, id) {
    this.name = name;
    this.id = id;
    this.human = true;
    this.hello = function() {
        console.log(`Hello ${this.name}`);
    };
}

/* При помощи свойства prototype мы можем добавлять
методы или свойства в наш конструктор и они будут
прототипно наследоваться у потомков (используется
например если у нас нет доступа к прототипу или если
мы не можем его менять, но его нужно модифицировать*/

//сделали метод exit
User.prototype.exit = function() {
    console.log(`Пользователь ${this.name} ушел`);
};
/*теперь у нас прототипно будет наследоваться этот
метод и он появится у всех потомков, которые были 
созданы после него*/



/*внутри этой переменной у нас будет находиться уже
не функция, а объект. т.к. функция User стала 
конструктором и теперь, когда она вызывается при 
помощи ключевого слова new она создает новый объект 
с теми свойствами, которые мы её записали*/
const ivan = new User('Ivan', 28);
const alex = new User('Alex', 25);

ivan.exit();

console.log(ivan);
console.log(alex);

ivan.hello();
alex.hello();

/*конструкторы необходимы для создания новых 
однотипных объектов (напр. новые пользователи сайта,
товары в магазине, компоненты сайта и т.д.)*/