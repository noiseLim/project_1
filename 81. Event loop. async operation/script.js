"use strict";

// console.log(1);

// setTimeout(() => {
//     console.log('first timer');
// }, 2000);

// setTimeout(() => console.log('second timer'), 4000);

// console.log(2);

// let k = 0;

// function count() {
//     for (let i = 0; i < 1e9; i++) {
//         k++;
//     }
//     alert('done');
// }

// count();
/*тяжелая обработка данных пока не завершится блокирует работу 
остального сайта*/



setTimeout(() => {
    console.log(1);
}, 0);

console.log(2);

//Вопрос из собесед. Какой код выполнится быстрее?
/*
Ответ: 2, 1
setTimeout проходит через асинхронную часть не смотря на нулевой 
параметр и синхронный код всегда выполняется раньше асинхронного

кроме того когда js видит 0 он автоматически заменяет его на 4 мс.,
сделано это ради совместимости с разными браузерами

практике часто применяют такой костыть с нулем, чтобы обеспечить
выполнение после синхронного кода
*/